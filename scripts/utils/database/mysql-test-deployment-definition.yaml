apiVersion: v1
kind: PersistentVolume            # Create a PersistentVolume
metadata:
  name: mysql-pv-test
  labels:
    type: local
spec:
  storageClassName: standard      # Storage class. A PV Claim requesting the same storageClass can be bound to this volume. 
  capacity:
    storage: 250Mi
  accessModes:
    - ReadWriteOnce
  hostPath:                       # hostPath PersistentVolume is used for development and testing. It uses a file/directory on the Node to emulate network-attached storage
    path: "/Users/cpandey/dev/docker-data/restaurant/k8/mysql-test"
  persistentVolumeReclaimPolicy: Retain  # Retain the PersistentVolume even after PersistentVolumeClaim is deleted. The volume is considered “released”. But it is not yet available for another claim because the previous claimant’s data remains on the volume. 
---    
apiVersion: v1
kind: PersistentVolumeClaim        # Create a PersistentVolumeClaim to request a PersistentVolume storage
metadata:                          # Claim name and labels
  name: mysql-pv-claim-test
  labels:
    app: order-app
spec:                              # Access mode and resource limits
  storageClassName: standard       # Request a certain storage class
  accessModes:
    - ReadWriteOnce                # ReadWriteOnce means the volume can be mounted as read-write by a single Node
  resources:
    requests:
      storage: 250Mi
---
apiVersion: v1                    # API version
kind: Service                     # Type of kubernetes resource 
metadata:
  name: mysql-order-service         # Name of the resource
  labels:                         # Labels that will be applied to the resource
    app: order-app-service
spec:
  ports:
    - port: 3306
  selector:                       # Selects any Pod with labels `app=order-app,tier=mysql`
    app: order-app-service
    tier: mysql
  clusterIP: None

---
apiVersion: v1
kind: ConfigMap
metadata: 
    name: mysql-init-script
data:
    init-script.sql:  |
        CREATE DATABASE IF NOT EXISTS billdb;
        CREATE DATABASE IF NOT EXISTS deliverydb;
        CREATE DATABASE IF NOT EXISTS orderdb;
        USE billdb;
        CREATE TABLE bill_info (bill_info_id BIGINT NOT NULL, charge_cost FLOAT, charge_name varchar(255), invoice_no BIGINT NOT NULL, primary key (bill_info_id)) engine=InnoDB;
        CREATE TABLE billing (bill_id BIGINT NOT NULL, bill_amt FLOAT, cust_id BIGINT, date varchar(255), invoice_no varchar(255), order_id BIGINT, status varchar(255), primary key (bill_id)) engine=InnoDB;
        CREATE TABLE hibernate_sequence (next_val BIGINT) engine=InnoDB;
        INSERT INTO hibernate_sequence values ( 1 );
        ALTER TABLE bill_info ADD constraint BILL_INFO_FK foreign key (invoice_no) references billing (bill_id);
        USE deliverydb;
        CREATE TABLE delivery (delivery_id BIGINT NOT NULL, delivery_staus INTEGER, order_id BIGINT NOT NULL, PRIMARY KEY (delivery_id)) engine=InnoDB;
        CREATE TABLE hibernate_sequence (next_val BIGINT) engine=InnoDB;
        INSERT INTO hibernate_sequence VALUES ( 1 );
        USE orderdb;
        CREATE TABLE address (id bigint NOT NULL, city varchar(255), country varchar(255), line1 varchar(255), line2 varchar(255), STATE varchar(255), PRIMARY KEY (id)) engine=InnoDB;
        CREATE TABLE hibernate_sequence (next_val bigint) engine=InnoDB;
        INSERT INTO hibernate_sequence VALUES ( 1 );
        CREATE TABLE orders (id bigint NOT NULL, order_date varchar(255), order_time varchar(255), status integer, delivery_address_id bigint, PRIMARY KEY (id)) engine=InnoDB;
        ALTER TABLE orders ADD CONSTRAINT order_fk FOREIGN KEY (delivery_address_id) REFERENCES address (id);
         
---


apiVersion: apps/v1
kind: StatefulSet                    # Type of the kubernetes resource
metadata:
  name: mysql-ss           # Name of the deployment
  labels:                           # Labels applied to this deployment 
    app: mysql-ss-app
spec:
  selector:
    matchLabels:                    # This deployment applies to the Pods matching the specified labels
      app: mysql-pod-app
      tier: mysql
  serviceName: mysql-service-h 
  template:                         # Template for the Pods in this deployment
    metadata:
      labels:                       # Labels to be applied to the Pods in this deployment
        app: mysql-pod-app
        tier: mysql
    spec:                           # The spec for the containers that will be run inside the Pods in this deployment
      containers:
      - image: mysql:5.7           # The container image
        name: mysql
        env:                        # Environment variables passed to the container 
        - name: MYSQL_ROOT_PASSWORD 
          value: root
        - name: MYSQL_DATABASE
          value: billdb
        - name: MYSQL_USER
          value: cpandey
        - name: MYSQL_PASSWORD
          value: chandan@1234
        ports:
        - containerPort: 3308      # The port that the container exposes       
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage  # This name should match the name specified in `volumes.name`
          mountPath: /var/lib/mysql
        - name: mysql-init-script ##MOUNT PATH FOR INITIAL SCRIPT TO RUN ON DB
          mountPath: /docker-entrypoint-initdb.d
      volumes:                       # A PersistentVolume is mounted as a volume to the Pod  
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim-test
      - name: mysql-init-script
        configMap: 
            name: mysql-init-script